-- MySQL Script generated by MySQL Workbench
-- Sat Dec 23 20:42:34 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema multisass
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Table `account`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `account` ;

CREATE TABLE IF NOT EXISTS `account` (
     `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
     `name` VARCHAR(190) NOT NULL,
    `parent_id` INT UNSIGNED NULL,
    `tenant_id` INT UNSIGNED NOT NULL DEFAULT 1,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    INDEX `fk_account_parent_idx` (`parent_id` ASC) VISIBLE,
    INDEX `fk_account_tenant_idx` (`tenant_id` ASC) VISIBLE,
    CONSTRAINT `fk_account_parent`
    FOREIGN KEY (`parent_id`)
    REFERENCES `account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_account_tenant`
    FOREIGN KEY (`tenant_id`)
    REFERENCES `tenant` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `crypto_portfolio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crypto_portfolio` ;

CREATE TABLE IF NOT EXISTS `crypto_portfolio` (
      `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
      `account_id` INT UNSIGNED NOT NULL,
      `title` VARCHAR(190) NOT NULL,
    `created_by_member_id` VARCHAR(45) NULL,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    INDEX `fk_crypto_portfolio_account_idx` (`account_id` ASC) VISIBLE,
    CONSTRAINT `fk_crypto_portfolio_account`
    FOREIGN KEY (`account_id`)
    REFERENCES `account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `crypto_wallet`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `crypto_wallet` ;

CREATE TABLE IF NOT EXISTS `crypto_wallet` (
   `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
   `account_id` INT UNSIGNED NOT NULL,
   `portfolio_id` INT UNSIGNED NOT NULL,
   `platform` VARCHAR(190) NOT NULL,
    `masked_hash` VARCHAR(45) NOT NULL,
    `ballance` FLOAT NOT NULL DEFAULT 0,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `member_permission_group`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `member_permission_group` ;

CREATE TABLE IF NOT EXISTS `member_permission_group` (
     `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
     `member_id` INT UNSIGNED NOT NULL,
     `permission_group_id` INT UNSIGNED NOT NULL,
     `set_by_member_id` INT UNSIGNED NOT NULL,
     `set_at` DATETIME NOT NULL,
     PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    UNIQUE INDEX `uc_member_perm_group_member_group` (`member_id` ASC, `permission_group_id` ASC) VISIBLE,
    INDEX `fk_member_permission_group_perm_group_idx` (`permission_group_id` ASC) VISIBLE,
    INDEX `fk_member_permission_group_set_by_member_idx` (`set_by_member_id` ASC) VISIBLE,
    CONSTRAINT `fk_member_permission_group_member`
    FOREIGN KEY (`member_id`)
    REFERENCES `membership` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_member_permission_group_perm_group`
    FOREIGN KEY (`permission_group_id`)
    REFERENCES `permission_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_member_permission_group_set_by_member`
    FOREIGN KEY (`set_by_member_id`)
    REFERENCES `membership` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `membership`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `membership` ;

CREATE TABLE IF NOT EXISTS `membership` (
    `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `account_id` INT UNSIGNED NOT NULL,
    `user_id` INT UNSIGNED NOT NULL,
    `status` ENUM('pending', 'active', 'inactive') NOT NULL DEFAULT 'pending',
    `created_at` DATETIME NOT NULL,
    `updated_at` DATETIME NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    UNIQUE INDEX `uc_membership_user_account` (`user_id` ASC, `account_id` ASC) VISIBLE,
    INDEX `fk_membership_account_idx` (`account_id` ASC) VISIBLE,
    CONSTRAINT `fk_membership_account`
    FOREIGN KEY (`account_id`)
    REFERENCES `account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_membership_user`
    FOREIGN KEY (`user_id`)
    REFERENCES `user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `permission`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `permission` ;

CREATE TABLE IF NOT EXISTS `permission` (
        `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
        `context` ENUM('global') NOT NULL DEFAULT 'global',
    `action` ENUM('create', 'edit', 'delete', 'manage_access') NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    UNIQUE INDEX `uc_permission_context_action` (`context` ASC, `action` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `permission_group`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `permission_group` ;

CREATE TABLE IF NOT EXISTS `permission_group` (
      `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
      `account_id` INT UNSIGNED NOT NULL,
      `name` VARCHAR(190) NOT NULL,
    `is_assignable` TINYINT NOT NULL DEFAULT 1,
    `created_at` DATETIME NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    INDEX `fk_permission_group_account_idx` (`account_id` ASC) VISIBLE,
    CONSTRAINT `fk_permission_group_account`
    FOREIGN KEY (`account_id`)
    REFERENCES `account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `permission_group_value`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `permission_group_value` ;

CREATE TABLE IF NOT EXISTS `permission_group_value` (
        `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
        `permission_group_id` INT UNSIGNED NOT NULL,
        `permission_id` INT UNSIGNED NOT NULL,
        `value` TINYINT NOT NULL DEFAULT 0,
        `set_by_member_id` INT UNSIGNED NOT NULL,
        `set_at` DATETIME NOT NULL,
        PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    UNIQUE INDEX `uc_permission_group_val_group_perm` (`permission_group_id` ASC, `permission_id` ASC) VISIBLE,
    INDEX `fk_permission_group_value_permission_idx` (`permission_id` ASC) VISIBLE,
    INDEX `fk_permission_group_value_set_by_member_idx` (`set_by_member_id` ASC) VISIBLE,
    CONSTRAINT `fk_permission_group_value_permission`
    FOREIGN KEY (`permission_id`)
    REFERENCES `permission` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_permission_group_value_permission_group`
    FOREIGN KEY (`permission_group_id`)
    REFERENCES `permission_group` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
    CONSTRAINT `fk_permission_group_value_set_by_member`
    FOREIGN KEY (`set_by_member_id`)
    REFERENCES `membership` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `tenant`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `tenant` ;

CREATE TABLE IF NOT EXISTS `tenant` (
    `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `name` VARCHAR(190) NOT NULL,
    `is_standalone` TINYINT NOT NULL DEFAULT 0,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `user` ;

CREATE TABLE IF NOT EXISTS `user` (
      `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
      `email` VARCHAR(190) NOT NULL,
    `display_name` VARCHAR(190) NOT NULL,
    `first_name` VARCHAR(190) NOT NULL,
    `last_name` VARCHAR(190) NULL,
    `source_account_id` INT UNSIGNED NOT NULL,
    `cognito_id` VARCHAR(45) NULL,
    `cognito_user_pool` VARCHAR(45) NULL,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
    UNIQUE INDEX `email_UNIQUE` (`email` ASC) VISIBLE,
    INDEX `fk_user_source_account_idx` (`source_account_id` ASC) VISIBLE,
    CONSTRAINT `fk_user_source_account`
    FOREIGN KEY (`source_account_id`)
    REFERENCES `account` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wallet_allocation`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wallet_allocation` ;

CREATE TABLE IF NOT EXISTS `wallet_allocation` (
   `id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
   `wallet_id` INT UNSIGNED NOT NULL,
   `portion_type` ENUM('percent', 'ratio') NOT NULL,
    `point_in_time` DATETIME NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `wallet_transaction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `wallet_transaction` ;

CREATE TABLE IF NOT EXISTS `wallet_transaction` (
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Data for table `tenant`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO `tenant` (`id`, `name`, `is_standalone`) VALUES (1, 'default', 0);

COMMIT;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
